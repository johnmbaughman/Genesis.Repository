// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace Genesis.Repository.UnitTests.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class EntityMock<TId> : global::PCLMock.MockBase<global::Genesis.Repository.IEntity<TId>>, global::Genesis.Repository.IEntity<TId> where TId : struct
    {
        public EntityMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public TId? Id
        {
            get
            {
                return this.Apply(x => x.Id);
            }
        }
    }
}
namespace Genesis.Repository.UnitTests.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class RepositoryMock<TId, TEntity> : global::PCLMock.MockBase<global::Genesis.Repository.IRepository<TId, TEntity>>, global::Genesis.Repository.IRepository<TId, TEntity>
    {
        public RepositoryMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public TEntity Get(TId id)
        {
            return this.Apply(x => x.Get(id));
        }

        public global::System.Collections.Immutable.IImmutableList<TEntity> GetAll()
        {
            return this.Apply(x => x.GetAll());
        }

        public TEntity Save(TEntity entity)
        {
            return this.Apply(x => x.Save(entity));
        }

        public global::System.Collections.Immutable.IImmutableList<TEntity> SaveAll(global::System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            return this.Apply(x => x.SaveAll(entities));
        }

        public global::System.Collections.Immutable.IImmutableList<TEntity> SaveAll(TEntity[] entities)
        {
            return this.Apply(x => x.SaveAll(entities));
        }

        public System.Boolean Delete(TId id)
        {
            return this.Apply(x => x.Delete(id));
        }

        public System.Int32 DeleteAll()
        {
            return this.Apply(x => x.DeleteAll());
        }
    }
}

